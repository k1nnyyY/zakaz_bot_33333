import express from "express";
import bodyParser from "body-parser";
import TelegramBot, { Message } from "node-telegram-bot-api";
import fs from "fs";
import path from "path";
import mongoose, { Schema, Document } from "mongoose";
import dotenv from "dotenv";
import dbConnectionString from "./dbConfig.js";
import { fileURLToPath } from 'url';
import { dirname } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

dotenv.config();

interface ILesson extends Document {
  playlist: string;
  lessonNumber: number;
  videoUrl: string;
  description: string;
  imageUrl?: string;
  subLessons?: Array<{
    lessonNumber: number;
    title: string;
    videoUrl: string;
  }>;
}

const LessonSchema: Schema = new Schema({
  playlist: { type: String, required: true },
  lessonNumber: { type: Number, required: true },
  videoUrl: { type: String, required: true },
  description: { type: String, required: true },
  imageUrl: { type: String, required: false },
  subLessons: [
    {
      lessonNumber: { type: Number, required: false },
      title: { type: String, required: false },
      videoUrl: { type: String, required: false },
    },
  ],
});

const Lesson = mongoose.model<ILesson>("Lesson", LessonSchema);

interface IUser extends Document {
  chatId: number;
  authenticated: boolean;
  isAdmin: boolean;
}

const UserSchema: Schema = new Schema({
  chatId: { type: Number, required: true, unique: true },
  authenticated: { type: Boolean, required: true, default: false },
  isAdmin: { type: Boolean, required: true, default: false },
});

const User = mongoose.model<IUser>("User", UserSchema);

const app = express();
const PORT = process.env.PORT || "3000";
const TOKEN = process.env.BOT_TOKEN || "YOUR_BOT_TOKEN";

console.log("Starting Telegram Bot...");
const bot = new TelegramBot(TOKEN, { polling: true });

app.use(bodyParser.json());

mongoose.set("strictQuery", true);

await mongoose
  .connect(dbConnectionString, {
  })
  .then(async () => {
    console.log("Connected to MongoDB");

    const exampleLessons = [
      {
        playlist: "1",
        lessonNumber: 1,
        videoUrl: "http://example.com/lesson1",
        description: "Description for lesson 1",
        imageUrl: "http://example.com/image1.jpg",
      },
      {
        playlist: "1",
        lessonNumber: 2,
        videoUrl: "http://example.com/lesson2",
        description: "Description for lesson 2",
        imageUrl: "http://example.com/image2.jpg",
        subLessons: [
          {
            lessonNumber: 2.1,
            title: "Sub Lesson 1",
            videoUrl: "http://example.com/sublesson1",
          },
          {
            lessonNumber: 2.2,
            title: "Sub Lesson 2",
            videoUrl: "http://example.com/sublesson2",
          },
        ],
      },
    ];

    await Lesson.insertMany(exampleLessons);

    function checkPassword(password: string): boolean {
      const filePath = path.join(__dirname, "../passwords.txt");
      const passwords = fs
        .readFileSync(filePath, "utf-8")
        .split("\n")
        .map((p) => p.trim());
      return passwords.includes(password.trim());
    }

    function checkAdminPassword(password: string): boolean {
      const filePath = path.join(__dirname, "../admin_passwords.txt");
      const passwords = fs
        .readFileSync(filePath, "utf-8")
        .split("\n")
        .map((p) => p.trim());
      return passwords.includes(password.trim());
    }

    bot.onText(/\/start/, async (msg: Message) => {
      const chatId = msg.chat.id;

      const user = await User.findOne({ chatId });
      if (user && user.authenticated) {
        const message = user.isAdmin
          ? "–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª."
          : "–í—ã —É–∂–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª.";

        bot.sendMessage(chatId, message, {
          reply_markup: {
            keyboard: [
              [{ text: "–í–∏–¥–µ–æ –ö—É—Ä—Å—ã üéâ" }],
              [{ text: "–ì–∞–π–¥—ã ü•ã" }],
              [{ text: "–û—Ç–∑—ã–≤—ã üí¨" }],
              [{ text: "–ü–æ–º–æ—â—å üö®" }],
              [{ text: "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º ‚ùì" }],
              ...(user.isAdmin ? [[{ text: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è–º–∏ üõ†" }]] : []),
              [{ text: "Logout" }],
            ],
            one_time_keyboard: true,
            resize_keyboard: true,
          },
        });
      } else {
        bot.sendMessage(
          chatId,
          "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É Login –¥–ª—è –≤—Ö–æ–¥–∞.",
          {
            reply_markup: {
              keyboard: [[{ text: "Login" }]],
              one_time_keyboard: true,
              resize_keyboard: true,
            },
          }
        );
      }
    });

    bot.on("message", async (msg: Message) => {
      const chatId = msg.chat.id;
      const text: string | undefined = msg.text;

      const user = await User.findOne({ chatId });

      if (user && user.authenticated) {
        if (text === "Logout") {
          await User.findOneAndUpdate(
            { chatId },
            { authenticated: false, isAdmin: false }
          );
          bot.sendMessage(chatId, "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.", {
            reply_markup: {
              keyboard: [[{ text: "Login" }]],
              one_time_keyboard: true,
              resize_keyboard: true,
            },
          });
        } else if (user.isAdmin) {
          if (text === "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è–º–∏ üõ†") {
            bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
              reply_markup: {
                keyboard: [
                  [{ text: "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø–∞—Ä–æ–ª–∏" }],
                  [{ text: "–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å" }],
                  [{ text: "–£–¥–∞–ª–∏—Ç—å –ø–∞—Ä–æ–ª—å" }],
                  [{ text: "–ù–∞–∑–∞–¥" }],
                ],
                one_time_keyboard: true,
                resize_keyboard: true,
              },
            });
          } else if (text === "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø–∞—Ä–æ–ª–∏") {
            const filePath = path.join(__dirname, "../passwords.txt");
            const passwords = fs.readFileSync(filePath, "utf-8");
            bot.sendMessage(chatId, `–ü–∞—Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n${passwords}`);
          } else if (text === "–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å") {
            bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:");
            bot.once("message", (msg: Message) => {
              const newPass = msg.text?.trim();
              if (newPass) {
                fs.appendFileSync(
                  path.join(__dirname, "../passwords.txt"),
                  `\n${newPass}`
                );
                bot.sendMessage(chatId, "–ü–∞—Ä–æ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω.");
              }
            });
          } else if (text === "–£–¥–∞–ª–∏—Ç—å –ø–∞—Ä–æ–ª—å") {
            bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:");
            bot.once("message", (msg: Message) => {
              const delPass = msg.text?.trim();
              if (delPass) {
                const filePath = path.join(__dirname, "../passwords.txt");
                const passwords = fs
                  .readFileSync(filePath, "utf-8")
                  .split("\n")
                  .map((p) => p.trim());
                const updatedPasswords = passwords.filter((p) => p !== delPass);
                fs.writeFileSync(filePath, updatedPasswords.join("\n"));
                bot.sendMessage(chatId, "–ü–∞—Ä–æ–ª—å —É–¥–∞–ª–µ–Ω.");
              }
            });
          } else if (text === "–ù–∞–∑–∞–¥") {
            bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª.", {
              reply_markup: {
                keyboard: [
                  [{ text: "–í–∏–¥–µ–æ –ö—É—Ä—Å—ã üéâ" }],
                  [{ text: "–ì–∞–π–¥—ã ü•ã" }],
                  [{ text: "–û—Ç–∑—ã–≤—ã üí¨" }],
                  [{ text: "–ü–æ–º–æ—â—å üö®" }],
                  [{ text: "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º ‚ùì" }],
                  [{ text: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è–º–∏ üõ†" }],
                  [{ text: "Logout" }],
                ],
                one_time_keyboard: true,
                resize_keyboard: true,
              },
            });
          }
        } else {
          if (text === "–ì–∞–π–¥—ã ü•ã") {
            bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –≥–∞–π–¥–æ–≤:", {
              reply_markup: {
                keyboard: [
                  [{ text: "–ì–∞–π–¥ –ø–æ –Ω–∞–±–æ—Ä—É –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã" }],
                  [{ text: "–ì–∞–π–¥ –ø–æ —Å–Ω–∏–∂–µ–Ω–∏—é –≤–µ—Å–∞" }],
                  [{ text: "–ì–∞–π–¥ –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —Ç—É—Ä–Ω–∏—Ä—É" }],
                ],
                one_time_keyboard: true,
                resize_keyboard: true,
              },
            });
          } else if (
            text === "–ì–∞–π–¥ –ø–æ –Ω–∞–±–æ—Ä—É –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã" ||
            text === "–ì–∞–π–¥ –ø–æ —Å–Ω–∏–∂–µ–Ω–∏—é –≤–µ—Å–∞" ||
            text === "–ì–∞–π–¥ –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —Ç—É—Ä–Ω–∏—Ä—É"
          ) {
            let filePath = "";
            if (text === "–ì–∞–π–¥ –ø–æ –Ω–∞–±–æ—Ä—É –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã") {
              filePath = path.join(__dirname, "assets", "–ì–∞–π–¥_–ø–æ_–Ω–∞–±–æ—Ä—É_–º—ã—à–µ—á–Ω–æ–π_–º–∞—Å—Å—ã_compressed.pdf");
            } else if (text === "–ì–∞–π–¥ –ø–æ —Å–Ω–∏–∂–µ–Ω–∏—é –≤–µ—Å–∞") {
              filePath = path.join(__dirname, "assets", "–ì–∞–π–¥_–ø–æ_—Å–Ω–∏–∂–µ–Ω–∏—é_–≤–µ—Å–∞_compressed.pdf");
            } else if (text === "–ì–∞–π–¥ –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —Ç—É—Ä–Ω–∏—Ä—É") {
              filePath = path.join(__dirname, "assets", "–ì–∞–π–¥_–ø–æ_–ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ_–∫_—Ç—É—Ä–Ω–∏—Ä—É_compressed.pdf");
            }

            bot.sendChatAction(chatId, "upload_document");

            bot
              .sendDocument(chatId, filePath)
              .then(() => {
                bot.sendMessage(chatId, "–ì–∞–π–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!");
              })
              .catch((error) => {
                bot.sendMessage(
                  chatId,
                  "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–∞–π–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                );
                console.error(error);
              });
          }
        }
      } else if (text === "Login") {
        bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å.");
      } else if (text && checkPassword(text)) {
        await User.findOneAndUpdate(
          { chatId },
          { authenticated: true, isAdmin: false },
          { upsert: true, new: true }
        );

        bot.sendMessage(chatId, "–ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª.", {
          reply_markup: {
            keyboard: [
              [{ text: "–í–∏–¥–µ–æ –ö—É—Ä—Å—ã üéâ" }],
              [{ text: "–ì–∞–π–¥—ã ü•ã" }],
              [{ text: "–û—Ç–∑—ã–≤—ã üí¨" }],
              [{ text: "–ü–æ–º–æ—â—å üö®" }],
              [{ text: "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º ‚ùì" }],
              [{ text: "Logout" }],
            ],
            one_time_keyboard: true,
            resize_keyboard: true,
          },
        });
      } else if (text && checkAdminPassword(text)) {
        await User.findOneAndUpdate(
          { chatId },
          { authenticated: true, isAdmin: true },
          { upsert: true, new: true }
        );

        bot.sendMessage(
          chatId,
          "–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª.",
          {
            reply_markup: {
              keyboard: [
                [{ text: "–í–∏–¥–µ–æ –ö—É—Ä—Å—ã üéâ" }],
                [{ text: "–ì–∞–π–¥—ã ü•ã" }],
                [{ text: "–û—Ç–∑—ã–≤—ã üí¨" }],
                [{ text: "–ü–æ–º–æ—â—å üö®" }],
                [{ text: "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º ‚ùì" }],
                [{ text: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è–º–∏ üõ†" }],
                [{ text: "Logout" }],
              ],
              one_time_keyboard: true,
              resize_keyboard: true,
            },
          }
        );
      } else if (text) {
        bot.sendMessage(chatId, "–ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
      }
    });

    bot.onText(/\/lessons/, async (msg: Message) => {
      const chatId = msg.chat.id;
      const lessons = await Lesson.find({}).sort({ lessonNumber: 1 });

      lessons.forEach((lesson) => {
        const inlineKeyboard = lesson.subLessons?.map((subLesson) => [
          {
            text: subLesson.title,
            callback_data: JSON.stringify({
              lessonNumber: lesson.lessonNumber,
              subLessonNumber: subLesson.lessonNumber,
            }),
          },
        ]) || [];

        bot.sendPhoto(chatId, lesson.imageUrl, {
          caption: `–£—Ä–æ–∫ ${lesson.lessonNumber}: ${lesson.description}\n[–°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ](${lesson.videoUrl})`,
          parse_mode: "Markdown",
          reply_markup: {
            inline_keyboard: inlineKeyboard,
          },
        });
      });
    });

    bot.on("callback_query", (callbackQuery) => {
      const { message, data } = callbackQuery;
      const { lessonNumber, subLessonNumber } = JSON.parse(data);

      Lesson.findOne({ lessonNumber }).then((lesson) => {
        if (lesson) {
          const subLesson = lesson.subLessons.find(
            (s) => s.lessonNumber === subLessonNumber
          );
          if (subLesson) {
            bot.sendMessage(
              message.chat.id,
              `–ü–æ–¥—É—Ä–æ–∫ ${subLesson.lessonNumber}: ${subLesson.title}\n[–°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ](${subLesson.videoUrl})`,
              { parse_mode: "Markdown" }
            );
          }
        }
      });
    });

    app.listen(PORT, () => {
      console.log(`Server is running on port ${PORT}`);
    });
  })
  .catch((error) => console.log(error));
